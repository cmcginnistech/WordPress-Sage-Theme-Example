<?php

namespace Roots\Sage\PDF_Functions;

use Roots\Sage\PDF_Generate;

/**
 * Create archive pdf post.
 * Archive years are simply based on the post publish date.
 */
function create_archive_post( $data ) {

  $older_versions = get_posts([
    'post_type' => 'pdf_archive',
    'meta_key' => 'archived_record',
    'meta_value' => $data['post_id'],
    'year' => date('Y')
  ]);

  // set the defaults
  $curr_yr = date('Y');
  $ver = 1;
  $archive_title = "{$data['post_title']} ({$curr_yr} v{$ver})";
  $new_filename = "{$data['filename']}_{$curr_yr}";
  $baseurl = get_site_url(null, '/');

  // if we already have older archives
  if ( $older_versions ) {
    // count the number of older versions
    $num_older_versions = count($older_versions);
    // incremement the version #
    $ver = $num_older_versions + 1;
    // append version # to the archive title
    $archive_title = "{$data['post_title']} ({$curr_yr} v{$ver})";
    // append version # to filename
    $new_filename .= "_v{$ver}";
  }

  $url_to_pdf = "{$baseurl}{$data['path']}{$new_filename}.pdf";

  $newpost = [
    'post_type'     => 'pdf_archive',
    'post_title'    => $archive_title,
    'post_status'   => 'publish'
  ];

  $post_id = wp_insert_post( $newpost );

  update_field( 'autogenerated_pdf_file', $url_to_pdf, $post_id );
  update_field( 'archived_record', $data['post_id'], $post_id );
  update_field( 'version', $ver, $post_id );
  update_field( 'pdf_filename', $new_filename, $post_id );
  update_field( 'archive_post_type', get_post_type($data['post_id']), $post_id );

  return [
    'title' => $archive_title,
    'version' => $ver,
    'filename' => $new_filename
  ];
}

/**
 * Delete old file and replace with new one.
 * Makes sure the new file exists before deleting the old one!
 */
function replace_file( $file_to_replace, $new_file ) {

  $path = parse_url($file_to_replace, PHP_URL_PATH);
  $path_to_oldfile = $_SERVER['DOCUMENT_ROOT'] . $path;

  // make sure new file exists before deleting the old one
  if ( !file_exists($new_file) ) {
    return;

  // new file exists so, delete the old file
  } elseif ( file_exists($path_to_oldfile) ) {
    unlink($path_to_oldfile);
  }

}

/**
 * Detect if we are currently generating a PDF using the $_POST request.
 */
function doing_pdf_gen() {
  return (
    (isset($_POST['action']) && $_POST['action'] == 'leiden_generate_pdf')
    ||
    (isset($_GET['pdf']) && $_GET['pdf'] == '1')
    ||
    defined( 'LEIDEN_DOING_BULK_PDF' )
  );
}

/**
 * Detect if we are currently generating an archive PDF.
 */
function doing_archive_pdf_gen() {
  return (
    (doing_pdf_gen() && isset($_POST['archive']) && $_POST['archive'] == true)
    ||
    defined( 'LEIDEN_DOING_BULK_PDF' )
  );
}

/**
 * Bulk generate PDFs based on a provided post type.
 * Typically run via cron job.
 */
function do_bulk_pdf_gen( $post_type, $start = null ) {

  if ( defined( 'LEIDEN_DOING_BULK_PDF' ) ) {
    error_log('TLC: bulk PDF batch already running!');
    return;
  }

  if ( !$post_type ) {
    error_log('TLC: please provide a post type');
    return;
  }

  error_log("TLC: starting bulk pdf batch ({$post_type})");
  define( 'LEIDEN_DOING_BULK_PDF', true );

  $args = [
    'post_type' => $post_type,
    'posts_per_page' => 999 // don't use -1 or offset won't work
  ];

  $total_posts = get_posts($args);
  $total = count($total_posts);

  if ( $start ) {
    $args['offset'] = $start;
  }

  $posts = get_posts($args);

  if ( empty($posts) ) {
    return;
  }

  foreach ( $posts as $i => $post ) {
    $i = $start ? $start+$i : $i+1;
    $message = PDF_Generate\generate_pdf( $post->ID );
    error_log("TLC: {$post_type} {$i} of {$total} (ID #{$post->ID}): {$message}");
  }

  error_log("TLC: completed batch ({$post_type})");
}
add_action( 'do_bulk_pdf_gen', __NAMESPACE__ . '\\do_bulk_pdf_gen', 10, 2 );
